#!/usr/bin/env ruby
# Copyright 2011 Wellstorm Development LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'rubygems'
require 'optparse'
require_relative '../lib/wmls'
options = {:defs => {}}

opts =OptionParser.new do |o|
  o.banner = "Usage: wmls [options]"
  o.on("-v", "--verbose", "Print request and response headers and SOAP bodies to stderr") do |v|
    options[:verbose] = v
  end
  o.on("-DVARIABLE=VALUE", "Define a substitution variable. Use this multiple times to replace %variable% with value in the template.") do |v|
    m = /([a-zA-Z0-9_]*)=(.*)/.match(v.to_s)
    #puts " -D #{m[1]} = #{m[2]}"
    options[:defs][m[1]] = m[2]
  end
  o.on("-r", "--url url", "URL of the WITSML service") do |v|
    options[:url] = v
  end
  o.on("-t", "--timeout seconds", "timeout in seconds (optional, default 60)") do |v|
    options[:timeout] = v
  end
  o.on("-u", "--username USER", "HTTP user name (optional)") do |v|
    options[:user_name] = v
  end
  o.on("-p", "--password PASS", "HTTP password (optional)") do |v|
    options[:password] = v
  end
  o.on("-q", "--query QUERYFILE", "Path to file containing query, delete, add or update template. (optional, default stdin)") do |v|
    options[:query] = v
  end
  o.on("-a", "--action ACTION", [:cap,:add,:get,:update,:delete], "WITSML action: cap, add, get, update, or delete (optional, default 'get')") do |v|
    options[:action] = v || :get
  end
  o.on("-o", "--optionsin OPTIONSIN",  "optionsIn string (optional)") do |v|
    options[:optionsin] = v || ""
  end
  o.on_tail("-h", "--help", "Show this message") do
    puts o
    exit
  end
end


# Load the named file and return its contents as a string
def get_file_as_string(filename, defs)
  data = ''
  if(filename)
    f = File.open(filename, "r")
  else
    f = $stdin
  end

  f.each_line do |line|
    defs.each_key do |key|
      line.gsub! "%#{key}%", defs[key]
    end
    data += line
  end
  return data
end


opts.parse!
if ( !options[:url] )
  puts(opts.help)
  exit 1
end


template= get_file_as_string(options[:query], options[:defs] ) unless options[:action] == :cap

wmls = Wmls.new options[:url], options[:user_name], options[:password]
wmls.timeout = options[:timeout].to_i if (options[:timeout])
wmls.verbose = options[:verbose] if (options[:verbose])
case options[:action]
  when :add
  result = wmls.add_to_store(template, options[:optionsin])
  when :delete
  result = wmls.delete_from_store(template, options[:optionsin])
  when :update
  result = wmls.update_in_store(template, options[:optionsin])
  when :cap
  result = wmls.get_cap options[:optionsin]
  when :get,nil
  result = wmls.get_from_store(template, options[:optionsin])
  else
  raise "unsupported action #{options[:action]}"
end


status, supp_msg, witsml = result
if (status != 1)
  $stderr.puts "Error #{status}: #{supp_msg}"
  status
else
  $stdout.puts witsml
  0
end
